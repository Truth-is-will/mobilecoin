# Copyright (c) 2018-2022 The MobileCoin Foundation
#
# MobileCoin Core projects - Reusable Workflow - Run integration tests in a development namespace.
#
# All current tests run with tools, scripts and binaries built and embedded within the toolbox
# (bootstrap-tools) image. The toolbox image is built and versioned with the app code, so it will only
# have the tools available at its build time.  This allows tests to be internally consistent with the
# release you added the test in.
#
# To add tests:
#   - Make sure binaries/scripts are included as part of the toolbox.
#       Dockerfile: .internal-ci/docker/Dockerfile.bootstrap-tools
#       All files saved under .internal-ci/util and .internal-ci/test are already included in the
#       toolbox image
#
#   - Simple commands or standalone binaries can use the mobilecoinofficial/gha-k8s-toolbox
#      toolbox-exec GitHub Action.
#
#   - Python tests and multipart scripts should include a wrapper script that installs/refreshes
#      any requirements and build protos as required. See .internal-ci/test
#
#   - Secrets should be generated at Deploy time (mobilecoin-workflow-dev-deploy) and placed in a
#      k8s secret or configmap object that is then configured as a env or volume on the toolbox deployment.
#       .internal-ci/helm/fog-ingest/templates/toolbox-deployment.yaml
#     CBB: move testing tool box into its own chart.
#
#   - Make tests optional by adding a variable in the inputs and add variable to
#       mobilecoin-dispatch-dev-test so dispatch workflows can use it.
#
# When adding tests remember:
#   - Tests are baked into the version they were added in. This is so they will be internally consistent
#      with the binaries and configurations they were intended to test.
#
#   - Any tests/tools/configs/secrets you add now will not be available to the "Previous Release"
#      toolbox container.
#
#   - All tests run with in the kubernetes namespace context so we can reach internally hosted endpoints,
#      like mobilecoind. (CBB: add full-service?)
#
# CBB: make tests work if client_auth_token is enabled. Will require generating the auth tokens.

name: mobilecoin-workflow-dev-test

on:
  workflow_call:
    inputs:
      namespace:
        description: "Target Namespace"
        type: string
        required: true
      ingest_color:
        description: "Fog Ingest blue/green"
        type: string
        required: true
      fog_distribution:
        description: "Run fog-distribution test"
        type: string
        required: false
        default: 'true'
      fog_test_client_v0:
        description: "Run fog-test-client v0 test"
        type: string
        required: false
        default: 'true'
      fog_test_client_v2:
        description: "Run fog-test-client v2 test"
        type: string
        required: false
        default: 'true'
      mobilecoind_grpc_integration:
        description: "Run mobilecoind-grpc integration test"
        type: string
        required: false
        default: 'true'
      mobilecoind_json_integration:
        description: "Run mobilecoind-json integration test"
        type: string
        required: false
        default: 'true'
      minting:
        description: "Run minting setup tests"
        type: string
        required: false
        default: 'true'
      mint_auditor:
        description: "Run mint-auditor tests"
        type: string
        required: false
        default: 'true'
      drain_accounts:
        description: "Run drain_accounts.py to move coin from initial keys to fog keys accounts"
        type: string
        required: false
        default: 'true'
    secrets:
      RANCHER_CLUSTER:
        description: "Rancher cluster name"
        required: true
      RANCHER_URL:
        description: "Rancher server URL"
        required: true
      RANCHER_TOKEN:
        description: "Rancher access token"
        required: true
      FOG_REPORT_SIGNING_CA_CERT:
        description: "Fog Report Signing CA"
        required: true
      CACHE_BUSTER:
        description: "string to make cache unique"
        required: true

jobs:
  list-values:
    runs-on: [self-hosted, Linux, small]
    steps:
    - name: values
      run: |
        echo namespace ${{ inputs.namespace }}
        echo ingest_color ${{ inputs.ingest_color }}
        echo fog_distribution ${{ inputs.fog_distribution }}
        echo fog_test_client_v0 ${{ inputs.fog_test_client_v0 }}
        echo fog_test_client_v2 ${{ inputs.fog_test_client_v0 }}
        echo mobilecoind_grpc_integration ${{ inputs.mobilecoind_grpc_integration }}
        echo mobilecoind_json_integration ${{ inputs.mobilecoind_json_integration }}
        echo minting ${{ inputs.minting }}
        echo mint_auditor ${{ inputs.mint_auditor }}
        echo drain-accounts ${{ inputs.drain_accounts }}

  setup-environment:
    runs-on: [self-hosted, Linux, small]
    env:
      FOG_REPORT_SIGNING_CA_CERT_PATH: .tmp/fog_report_signing_ca_cert.pem
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Delete existing keys
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: toolbox-exec
        ingest_color: ${{ inputs.ingest_color }}
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.RANCHER_URL }}
        rancher_token: ${{ secrets.RANCHER_TOKEN }}
        command: |
          rm -rf /tmp/sample_data

    # Populates ledger and keys in toolbox at /tmp/sample_data
    - name: Recreate Keys for Testing
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: toolbox-exec
        ingest_color: ${{ inputs.ingest_color }}
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.RANCHER_URL }}
        rancher_token: ${{ secrets.RANCHER_TOKEN }}
        command: |
          INITIALIZE_LEDGER="true" \
          FOG_REPORT_URL="fog://fog.${{ inputs.namespace }}.development.mobilecoin.com:443" \
          /util/generate_origin_data.sh

  fog-distribution:
    name: fog-distribution ${{ inputs.fog_distribution == 'true' && '(run)' || '(skipped)' }}
    runs-on: [self-hosted, Linux, small]
    needs:
    - setup-environment
    steps:
    - name: Test - fog-distribution
      if: inputs.fog_distribution == 'true'
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: toolbox-exec
        ingest_color: ${{ inputs.ingest_color }}
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.RANCHER_URL }}
        rancher_token: ${{ secrets.RANCHER_TOKEN }}
        command: |
          /test/fog-distribution-test.sh

  # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # minting-tx:
  #   name: minting-tx ${{ inputs.minting == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - fog-distribution
  #   steps:
  #   # minting keys should be available as as secret in the cluster and presented
  #   # to toolbox as a secret/volume at /minting-keys
  #   - name: Test- MintConfigTx - id1
  #     if: inputs.minting == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         mc-consensus-mint-client generate-and-submit-mint-config-tx \
  #           --node mc://node1.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --signing-key /minting-keys/master-minter1.private.pem \
  #           --token-id 1 \
  #           --config 1000000000:1:/minting-keys/token1-signer.public.pem \
  #           --total-mint-limit 10000000000

  # # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # minting:
  #   name: minting ${{ inputs.minting == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - minting-tx
  #   strategy:
  #     matrix:
  #       account_number: [1, 2, 3, 4, 5, 6]
  #   steps:
  #     # minting keys should be available as as secret in the cluster and presented
  #     # to toolbox as a secret/volume at /minting-keys
  #   - name: Test - Mint 1M tokens - id1
  #     if: inputs.minting == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         mc-consensus-mint-client generate-and-submit-mint-tx \
  #           --node mc://node1.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --signing-key /minting-keys/token1-signer.private \
  #           --recipient $(cat /tmp/sample_data/fog_keys/account_keys_${{ matrix.account_number }}.b58pub) \
  #           --token-id 1 \
  #           --amount 1000000

  # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # mobilecoind-json-integration:
  #   name: mobilecoind-json-integration ${{ inputs.mobilecoind_json_integration == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - minting
  #   steps:
  #   - name: Test - mobilecoind-json
  #     if: inputs.mobilecoind_json_integration == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         /test/mobilecoind-json-integration-test.sh

  # # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # mobilecoind-grpc-integration:
  #   name: mobilecoind-grpc-integration ${{ inputs.mobilecoind_grpc_integration == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - mobilecoind-json-integration
  #   steps:
  #   - name: Test - mobilecoind-grpc (previously Wallet Integration)
  #     if: inputs.mobilecoind_grpc_integration == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         /test/mobilecoind-integration-test.sh

  # # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # mint-auditor:
  #   name: mint-auditor ${{ inputs.mint_auditor == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - mobilecoind-grpc-integration
  #   steps:
  #   - name: Test - mint-auditor
  #     if: inputs.mint_auditor == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         /test/mint-auditor.sh

  # # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # drain-accounts:
  #   name: drain-accounts ${{ inputs.drain_accounts == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - mint-auditor
  #   steps:
  #   - name: Test - drain_accounts.py
  #     if: inputs.drain_accounts == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         /test/mobilecoind-grpc-drain-accounts.sh

  # # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # fog-test-client-v0:
  #   name: fog-test-client-v0 ${{ inputs.fog_test_client_v0 == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - drain-accounts
  #   steps:
  #   - name: Test - fog-test-client
  #     if: inputs.fog_test_client_v0 == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         test_client \
  #           --key-dir /tmp/sample_data/fog_keys \
  #           --consensus mc://node1.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --consensus mc://node2.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --consensus mc://node3.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --num-clients 6 \
  #           --num-transactions 32 \
  #           --consensus-wait 300 \
  #           --transfer-amount 20 \
  #           --fog-view fog-view://fog.${{ inputs.namespace }}.development.mobilecoin.com:443 \
  #           --fog-ledger fog-ledger://fog.${{ inputs.namespace }}.development.mobilecoin.com:443


# test_client \
# --key-dir /tmp/sample_data/fog_keys \
# --consensus mc://node1.${NAMESPACE}.development.mobilecoin.com/ \
# --consensus mc://node2.${NAMESPACE}.development.mobilecoin.com/ \
# --consensus mc://node3.${NAMESPACE}.development.mobilecoin.com/ \
# --num-clients 6 \
# --num-transactions 32 \
# --consensus-wait 300 \
# --transfer-amount 20 \
# --fog-view fog-view://fog.${NAMESPACE}.development.mobilecoin.com:443 \
# --fog-ledger fog-ledger://fog.${NAMESPACE}.development.mobilecoin.com:443


  # This test requires test files and scripts that are embedded in the bootstrap-tools image - toolbox pod.
  # fog-test-client-v2:
  #   name: fog-test-client-v2 ${{ inputs.fog_test_client_v2 == 'true' && '(run)' || '(skipped)' }}
  #   runs-on: [self-hosted, Linux, small]
  #   needs:
  #   - fog-test-client-v0
  #   steps:
  #   - name: Test - fog-test-client
  #     if: inputs.fog_test_client_v2 == 'true'
  #     uses: mobilecoinofficial/gha-k8s-toolbox@v1
  #     with:
  #       action: toolbox-exec
  #       ingest_color: ${{ inputs.ingest_color }}
  #       namespace: ${{ inputs.namespace }}
  #       rancher_cluster: ${{ secrets.RANCHER_CLUSTER }}
  #       rancher_url: ${{ secrets.RANCHER_URL }}
  #       rancher_token: ${{ secrets.RANCHER_TOKEN }}
  #       command: |
  #         test_client \
  #           --key-dir /tmp/sample_data/fog_keys \
  #           --consensus mc://node1.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --consensus mc://node2.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --consensus mc://node3.${{ inputs.namespace }}.development.mobilecoin.com/ \
  #           --token-ids 0,1 \
  #           --num-clients 6 \
  #           --num-transactions 32 \
  #           --consensus-wait 300 \
  #           --transfer-amount 20 \
  #           --fog-view fog-view://fog.${{ inputs.namespace }}.development.mobilecoin.com:443 \
  #           --fog-ledger fog-ledger://fog.${{ inputs.namespace }}.development.mobilecoin.com:443
